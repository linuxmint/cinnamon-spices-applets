#!/usr/bin/python3
'''
Generate 01_bug_report.yml based on repository files
'''

import os
import json
import yaml

dirs_blacklist = ['.git', '.github']

repo_folder = os.path.realpath(os.path.abspath(os.path.join(
                  os.path.normpath(os.path.join(os.getcwd(), *(['..'] * 1))))))

HEADER = '''# DO NOT EDIT THIS FILE MANUALLY.
# Execute the script called bug_report_creator.py to generate it.

---
'''

BUG_REPORT = {'name': 'üêú Applet Bug Report',
              'description': "If something isn't working, file a report. üîß",
              'title': 'Applet Bug',
              'labels': ['BUG'],
              'body': [{'type': 'markdown',
                        'attributes': {'value': 'Thanks for taking the time to fill out this bug report!'}},
                       {'type': 'input', 'id': 'applet_version',
                        'attributes': {'description': '(can be found in "About..." or in `metadata.json`)',
                                       'label': 'Applet version/Build date',
                                       'placeholder': 'ex. 4.2.1'},
                        'validations': {'required': False}},
                       {'type': 'input', 'id': 'cinnamon_version',
                        'attributes': {'description': '(`cinnamon --version`)',
                                       'label': 'Cinnamon version',
                                       'placeholder': 'ex. 5.6.3'},
                        'validations': {'required': True}},
                       {'type': 'input', 'id': 'distribution',
                        'attributes': {'description': '(Mint 21.2, Arch, Fedora 38)',
                                       'label': 'Distribution',
                                       'placeholder': 'ex. Mint 21.2'},
                        'validations': {'required': True}},
                       {'type': 'input', 'id': 'graphics',
                        'attributes': {'description': '(AMD/NVIDIA/Intel and nouveau/kernel/package(s))',
                                       'label': 'Graphics hardware *and* driver used',
                                       'placeholder': 'ex. NVIDIA GeForce RTX 4060 and nvidia-driver R535'},
                        'validations': {'required': False}},
                       {'type': 'dropdown', 'id': 'applet',
                        'attributes': {'default': 0,
                                       'label': 'Applet name and maintainer',
                                       'options': []},
                        'validations': {'required': True}},
                       {'type': 'textarea', 'id': 'what-happened',
                        'attributes': {'description': 'Also tell us, what did you expect to happen?',
                                       'label': 'What happened?',
                                       'placeholder': 'Tell us what you see!'},
                        'validations': {'required': True}},
                       {'type': 'textarea', 'id': 'other',
                        'attributes': {'description': 'Anything else that might help get this fixed faster? (logs, screenshots, etc.)',
                                       'label': 'Other information',
                                       'placeholder': 'Extra details...'},
                        'validations': {'required': False}},
                       {'type': 'markdown',
                        'attributes': {'value': "*By submitting this issue, you agree to behave respectfully and in a mature manner. If in doubt, refer to the [Golden Rule](https://en.wikipedia.org/wiki/Golden_Rule) and [Github's Community Guidelines](https://docs.github.com/en/site-policy/github-terms/github-community-guidelines).*"}}]}


def main():
    """
    List the repository directories and retrieve author information.
    """
    xlets_and_authors = []

    try:
        for name in os.listdir(repo_folder):
            if name in dirs_blacklist:
                continue

            info_file_path = os.path.join(repo_folder, name, 'info.json')

            if os.path.isfile(info_file_path):
                with open(info_file_path, 'r', encoding='utf-8') as info:
                    file_data = json.load(info)

                author_value = file_data.get('author', 'none')
                author = '' if author_value == 'none' else f' @{author_value}'

                xlets_and_authors.append(f'{name}{author}')
    finally:
        dropdown_list = sorted(sorted(xlets_and_authors), key=str.casefold)
        with open(os.path.join(repo_folder, '.github', 'ISSUE_TEMPLATE',
                               '01_bug_report.yml'), 'w',
                  encoding='utf-8') as bug_report_yaml:
            BUG_REPORT['body'][5]['attributes']['options'] = dropdown_list

            bug_report_yaml.write(HEADER)
            yaml.dump(BUG_REPORT, bug_report_yaml)


if __name__ == '__main__':
    main()
